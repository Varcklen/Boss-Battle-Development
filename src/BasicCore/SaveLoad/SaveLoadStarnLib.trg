{
  "Id": 50332148,
  "Comment": "",
  "IsScript": true,
  "RunOnMapInit": false,
  "Script": "library SaveLoadStartLib\r\n\r\nfunction ExpEnd takes nothing returns nothing\r\n    local integer id = GetHandleId( GetExpiredTimer( ) )\r\n    local player p = LoadPlayerHandle( udg_hash, id, StringHash( \"exp2\" ) )\r\n    \r\n    if GetLocalPlayer() == p then\r\n        call BlzFrameSetVisible( expbar, false )\r\n        call BlzFrameSetVisible( expicon, false )\r\n    endif\r\n    call FlushChildHashtable( udg_hash, id )\r\n    \r\n    set p = null\r\nendfunction\r\n\r\nfunction ExpDo takes nothing returns nothing\r\n    local integer id = GetHandleId( GetExpiredTimer( ) )\r\n    local integer oldexp = LoadInteger( udg_hash, id, StringHash( \"exp1old\" ) ) + 5\r\n    local integer expc = LoadInteger( udg_hash, id, StringHash( \"exp1give\" ) )\r\n    local integer oldlvl = LoadInteger( udg_hash, id, StringHash( \"exp1lvl\" ) )\r\n    local integer c = LoadInteger( udg_hash, id, StringHash( \"exp1\" ) ) + 5\r\n    local player p = LoadPlayerHandle( udg_hash, id, StringHash( \"exp1\" ) )\r\n    local integer ab1 \r\n    local integer ab2 \r\n    local integer id1\r\n    local integer needenexp = 0\r\n    \r\n    if c < expc then\r\n        call SaveInteger( udg_hash, id, StringHash( \"exp1\" ), c )\r\n        if oldlvl <= 20 then\r\n            set needenexp = udg_ExpNeeded[oldlvl]\r\n        else\r\n            set needenexp = udg_ExpNeeded[20] + (1000*(oldlvl-20))\r\n        endif\r\n        if oldexp < needenexp then\r\n            if GetLocalPlayer() == p then\r\n                call BlzFrameSetValue(BlzGetFrameByName(\"ExpBarEx\",1), RMinBJ(100,(oldexp*100)/needenexp) )\r\n                call BlzFrameSetText(BlzGetFrameByName(\"ExpBarExText\",1), I2S(oldexp)+\"/\"+I2S(needenexp))\r\n            endif\r\n        else\r\n            set oldexp = 0\r\n            set oldlvl = oldlvl + 1\r\n            if udg_ExpBonuses[oldlvl + 1] != 0 then\r\n                set ab1 = udg_ExpBonuses[oldlvl + 1]\r\n                set ab2 = udg_ExpBonuses[oldlvl]\r\n            else\r\n                set ab1 = 'A0RI'\r\n                set ab2 = 'A0RI'\r\n            endif\r\n            \r\n            call SaveInteger( udg_hash, id, StringHash( \"exp1lvl\" ), oldlvl )\r\n            call DestroyEffect( AddSpecialEffectTarget(\"Abilities\\\\Spells\\\\Human\\\\ReviveHuman\\\\ReviveHuman.mdl\", udg_hero[GetPlayerId(p) + 1], \"origin\" ) )\r\n            if GetLocalPlayer() == p then\r\n                if udg_ExpBonuses[oldlvl + 1] != 0 then\r\n                    call BlzFrameSetVisible( expfon, true )\r\n                    call BlzFrameSetVisible( expicon, true )\r\n                    call BlzFrameSetTexture( expicon, BlzGetAbilityIcon(ab1),0, true)\r\n                endif\r\n                call BlzFrameSetValue(BlzGetFrameByName(\"ExpBarEx\",1), 0 )\r\n                call BlzFrameSetText(BlzGetFrameByName(\"ExpBarExText\",1), I2S(oldexp)+\"/\"+I2S(needenexp))\r\n                if ab2 != 'A0RI' then\r\n                    call BlzFrameSetText( expword, BlzGetAbilityExtendedTooltip(ab2, 0) ) \r\n                endif\r\n            endif\r\n        endif\r\n        call SaveInteger( udg_hash, id, StringHash( \"exp1old\" ), oldexp )\r\n    else    \r\n        set id1 = GetHandleId( p )\r\n        if LoadTimerHandle( udg_hash, id1, StringHash( \"exp2\" ) ) == null  then\r\n            call SaveTimerHandle( udg_hash, id1, StringHash( \"exp2\" ), CreateTimer() )\r\n        endif\r\n        set id1 = GetHandleId( LoadTimerHandle(udg_hash, id1, StringHash( \"exp2\" ) ) )\r\n        call SavePlayerHandle( udg_hash, id1, StringHash( \"exp2\" ), p )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( p ), StringHash( \"exp2\" ) ), 10, false, function ExpEnd )\r\n        \r\n        call FlushChildHashtable( udg_hash, id )\r\n        call DestroyTimer( GetExpiredTimer() )\r\n    endif\r\n    \r\n    set p = null\r\nendfunction\r\n\r\nfunction ExpCast takes nothing returns nothing\r\n    local integer id = GetHandleId( GetExpiredTimer( ) )\r\n    local integer oldexp = LoadInteger( udg_hash, id, StringHash( \"expold\" ) )\r\n    local integer expc = LoadInteger( udg_hash, id, StringHash( \"expgive\" ) )\r\n    local integer oldlvl = LoadInteger( udg_hash, id, StringHash( \"explvl\" ) )\r\n    local player p = LoadPlayerHandle( udg_hash, id, StringHash( \"exp\" ) )\r\n    local integer id1 \r\n    local integer ab1 = 0\r\n    local boolean isIconVisible\r\n    \r\n    set isIconVisible = udg_ExpBonuses[oldlvl+1] != 0\r\n    if isIconVisible then\r\n        set ab1 = udg_ExpBonuses[oldlvl+1]\r\n    endif\r\n\r\n    if GetLocalPlayer() == p then\r\n        call BlzFrameSetVisible( expbar, true )\r\n        call BlzFrameSetVisible( expfon, false )\r\n        call BlzFrameSetText( expgive, \"|cffffcc00 +\" + I2S(expc) )\r\n        \r\n        call BlzFrameSetVisible( expicon, isIconVisible )\r\n        if isIconVisible then\r\n        \tcall BlzFrameSetTexture( expicon, BlzGetAbilityIcon(ab1),0, true)\r\n        endif\r\n    endif\r\n\r\n    set id1 = GetHandleId( p )\r\n    if LoadTimerHandle( udg_hash, id1, StringHash( \"exp1\" ) ) == null then\r\n        call SaveTimerHandle( udg_hash, id1, StringHash( \"exp1\" ), CreateTimer() )\r\n    endif\r\n    set id1 = GetHandleId( LoadTimerHandle(udg_hash, id1, StringHash( \"exp1\" ) ) )\r\n    call SaveInteger( udg_hash, id1, StringHash( \"exp1old\" ), oldexp )\r\n    call SaveInteger( udg_hash, id1, StringHash( \"exp1lvl\" ), oldlvl )\r\n    call SaveInteger( udg_hash, id1, StringHash( \"exp1give\" ), expc )\r\n    call SavePlayerHandle( udg_hash, id1, StringHash( \"exp1\" ), p )\r\n    call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( p ), StringHash( \"exp1\" ) ), 0.02, true, function ExpDo )\r\n\r\n    call FlushChildHashtable( udg_hash, id )\r\n    \r\n    set p = null\r\nendfunction\r\n\r\nfunction ExperienceCounting takes integer i, integer exp, player p returns nothing\r\n    local integer needenexp\r\n    local integer expst = exp\r\n    local integer expc = exp\r\n    local integer oldexp = udg_Exp[i]\r\n    local integer oldlvl = udg_LvL[i]\r\n    local integer id\r\n    \r\n    if udg_LvL[i] <= 20 then\r\n        set needenexp = udg_ExpNeeded[udg_LvL[i]]\r\n    else\r\n        set needenexp = udg_ExpNeeded[20] + (1000*(udg_LvL[i]-20))\r\n    endif\r\n    \r\n    set expc = expc + udg_ExtraExp[i]\r\n    if udg_HardNum > 0 and udg_Boss_LvL > 3 then\r\n        set expc = expc + R2I(expst*0.2*udg_HardNum)\r\n    endif\r\n    if udg_logic[101] and udg_Boss_LvL > 3 then\r\n        set expc = expc + R2I(expst*0.3)\r\n    endif\r\n    if udg_logic[6] and udg_Boss_LvL > 3 then\r\n        set expc = expc + R2I(expst*0.15)\r\n    endif\r\n    if udg_logic[78] then\r\n        set expc = expc + R2I(expst*0.15)\r\n    endif\r\n    if udg_Preset[9] then\r\n        set expc = expc - R2I(expst*0.4)\r\n    endif\r\n    if udg_BossChange then\r\n        set expc = expc - R2I(expst*0.8)\r\n    endif\r\n    if udg_worldmod[2] then\r\n        set expc = expc + R2I(expst*0.25)\r\n    endif\r\n    if udg_worldmod[6] then\r\n        set expc = expc + R2I(expst*0.5)\r\n    endif\r\n    if udg_worldmod[7] then\r\n        set expc = expc + R2I(expst*0.2)\r\n    endif\r\n    \r\n    if expc < 0 then\r\n        set expc = 0\r\n    endif\r\n    if expc > 0 then\r\n        set udg_Exp[i] = udg_Exp[i] + expc\r\n        if udg_Exp[i] >= needenexp then\r\n            set udg_Exp[i] = udg_Exp[i] - needenexp\r\n            set udg_LvL[i] = udg_LvL[i] + 1\r\n             \r\n            if udg_LvL[i] <= 20 then\r\n                set needenexp = udg_ExpNeeded[udg_LvL[i]]\r\n            else\r\n                set needenexp = udg_ExpNeeded[20] + (1000*(udg_LvL[i]-20))\r\n            endif\r\n            if udg_Exp[i] >= needenexp then\r\n                set udg_Exp[i] = needenexp - 5\r\n            endif\r\n        endif\r\n        \r\n        set id = GetHandleId( p )\r\n        if LoadTimerHandle( udg_hash, id, StringHash( \"exp\" ) ) == null  then\r\n            call SaveTimerHandle( udg_hash, id, StringHash( \"exp\" ), CreateTimer() )\r\n        endif\r\n        set id = GetHandleId( LoadTimerHandle(udg_hash, id, StringHash( \"exp\" ) ) )\r\n        call SaveInteger( udg_hash, id, StringHash( \"expold\" ), oldexp )\r\n        call SaveInteger( udg_hash, id, StringHash( \"explvl\" ), oldlvl )\r\n        call SaveInteger( udg_hash, id, StringHash( \"expgive\" ), expc )\r\n        call SavePlayerHandle( udg_hash, id, StringHash( \"exp\" ), p )\r\n        call TimerStart( LoadTimerHandle( udg_hash, GetHandleId( p ), StringHash( \"exp\" ) ), 2, false, function ExpCast )\r\n    endif\r\nendfunction\r\n\r\nfunction SaveCoding takes integer i, integer exp, player p returns nothing\r\n    local integer cyclA = 1\r\n    local integer cyclAEnd\r\n    local integer cyclB\r\n    local integer cyclBEnd\r\n    local integer cyclC\r\n    local integer Con\r\n    local integer KeyInt = 0\r\n    local integer SumInt = 0\r\n    local string Char = \"\"\r\n    local string String = \"\"\r\n    local string Key = \"\"\r\n    local string EnString = \"\"\r\n    local string FinString = \"\"\r\n    local integer name\r\n    \r\n    if udg_LvL[i] < 100 then\r\n        call ExperienceCounting(i,exp, p)\r\n    endif\r\n    \r\n    if GetPlayerName(Player(0)) == \"WorldEdit\" then\r\n    \tcall BJDebugMsg(\"SaveCoding - Reminder: The file is not creates in debug mode.\")\r\n    \treturn\r\n    endif\r\n    \r\n    set cyclAEnd = udg_SaveLoadMaxCharacters - 1\r\n    loop\r\n        exitwhen cyclA > cyclAEnd\r\n        set udg_SaveLoadEncryptionNumbers[cyclA] = \"\"\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    set cyclA = 1\r\n    loop\r\n        exitwhen cyclA > 2\r\n        set udg_SaveLoadTempStrings[cyclA] = \"\"\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    set KeyInt = GetRandomInt(1, udg_SaveLoadMaxEncryptionSets)\r\n    set Key = udg_SaveLoadCharacterNumbers[KeyInt]\r\n    set cyclA = 1\r\n    set cyclAEnd = udg_SaveLoadMaxCharacters\r\n    loop\r\n        exitwhen cyclA > cyclAEnd\r\n        set udg_SaveLoadEncryptionNumbers[cyclA - 1] = SubString(udg_SaveLoadEncryptionSet[KeyInt], cyclA - 1, cyclA)\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    \r\n    set cyclC = 1\r\n    loop\r\n        exitwhen cyclC > 2\r\n        if cyclC == 1 then\r\n            set Con = udg_Exp[i]\r\n        elseif cyclC == 2 then\r\n            set Con = udg_LvL[i]\r\n        endif\r\n        set cyclA = 1\r\n        set cyclAEnd = udg_SaveLoadSlots[cyclC]\r\n        loop\r\n            exitwhen cyclA > cyclAEnd\r\n            set udg_SaveLoadPowerOfMaxNumber = 1\r\n            set cyclB = cyclA\r\n            set cyclBEnd = udg_SaveLoadSlots[cyclC] - 1\r\n            loop\r\n                exitwhen cyclB > cyclBEnd\r\n                set udg_SaveLoadPowerOfMaxNumber = udg_SaveLoadPowerOfMaxNumber * udg_SaveLoadMaxCharacters\r\n                set cyclB = cyclB + 1\r\n            endloop\r\n            if udg_SaveLoadSlots[cyclC] - cyclA >= 1 then\r\n                set udg_SaveLoadConversionDividedInt = Con / udg_SaveLoadPowerOfMaxNumber\r\n                set udg_SaveLoadConversionRemainder = Con - ( udg_SaveLoadConversionDividedInt * udg_SaveLoadPowerOfMaxNumber )\r\n                set udg_SaveLoadTempStrings[cyclC] = udg_SaveLoadTempStrings[cyclC] + udg_SaveLoadCharacterNumbers[udg_SaveLoadConversionDividedInt]\r\n            else\r\n                set udg_SaveLoadTempStrings[cyclC] = udg_SaveLoadTempStrings[cyclC] + udg_SaveLoadCharacterNumbers[udg_SaveLoadConversionRemainder]\r\n            endif\r\n            set Con = udg_SaveLoadConversionRemainder\r\n            set cyclA = cyclA + 1\r\n        endloop\r\n        set cyclC = cyclC + 1\r\n    endloop\r\n    \r\n    set cyclA = 1\r\n    loop\r\n        exitwhen cyclA > 2\r\n        set EnString = EnString + udg_SaveLoadTempStrings[cyclA]\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    \r\n    set cyclA = 1\r\n    set cyclAEnd = StringLength(EnString)\r\n    loop\r\n        exitwhen cyclA > cyclAEnd\r\n        set cyclB = 0\r\n        set cyclBEnd = udg_SaveLoadMaxCharacters - 1\r\n        loop\r\n            exitwhen cyclB > cyclBEnd\r\n            if SubString(EnString, cyclA - 1, cyclA) == udg_SaveLoadCharacterNumbers[cyclB] then\r\n                set SumInt = SumInt + cyclB\r\n            endif\r\n            set cyclB = cyclB + 1\r\n        endloop\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    set Con = SumInt\r\n    set udg_SaveLoadConversionDividedInt = Con / udg_SaveLoadMaxCharacters\r\n    set udg_SaveLoadConversionRemainder = Con - ( udg_SaveLoadConversionDividedInt * udg_SaveLoadMaxCharacters )\r\n    set Char = udg_SaveLoadCharacterNumbers[udg_SaveLoadConversionRemainder]\r\n    set EnString = EnString + Char\r\n\r\n    set name = StringLength(GetPlayerName( p ))\r\n    set cyclA = 1\r\n    loop\r\n        exitwhen cyclA > 2\r\n        set cyclB = 1\r\n        set cyclBEnd = udg_SaveLoadMaxCharacters\r\n        loop\r\n            exitwhen cyclB > cyclBEnd\r\n            if SubString(GetPlayerName(p), cyclA - 1, cyclA) == SubString((udg_SaveLoadEncryptionSet[1]), cyclB - 1, cyclB) then\r\n                set name = name + cyclB\r\n            endif\r\n            set cyclB = cyclB + 1\r\n        endloop\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    \r\n    set Con = name\r\n    set udg_SaveLoadConversionDividedInt = Con / udg_SaveLoadMaxCharacters\r\n    set udg_SaveLoadConversionRemainder = Con - ( udg_SaveLoadConversionDividedInt * udg_SaveLoadMaxCharacters )\r\n    set Char = udg_SaveLoadCharacterNumbers[udg_SaveLoadConversionRemainder]\r\n    set EnString = EnString + Char\r\n\r\n    set cyclA = 1\r\n    set cyclAEnd = StringLength(EnString)\r\n    loop\r\n        exitwhen cyclA > cyclAEnd\r\n        set cyclB = 0\r\n        set cyclBEnd = udg_SaveLoadMaxCharacters - 1\r\n        loop\r\n            exitwhen cyclB > cyclBEnd\r\n            if SubString(EnString, cyclA - 1, cyclA) == udg_SaveLoadCharacterNumbers[cyclB] then\r\n                set String = String + udg_SaveLoadEncryptionNumbers[cyclB]\r\n            endif\r\n            set cyclB = cyclB + 1\r\n        endloop\r\n        set Con = cyclA\r\n        set udg_SaveLoadConversionDividedInt = Con / udg_SaveLoadBlockSize\r\n        set udg_SaveLoadConversionRemainder = Con - ( udg_SaveLoadConversionDividedInt * udg_SaveLoadBlockSize )\r\n        if udg_SaveLoadConversionRemainder <= 0 then\r\n            set String = String + \"-\"\r\n        endif\r\n        set cyclA = cyclA + 1\r\n    endloop\r\n    set FinString = Key + \"-\" + String\r\n       \r\n    if GetLocalPlayer() == p then\r\n        call PreloadGenClear() \r\n        call PreloadGenStart()  \r\n        call Preload(\"\\\")\\ncall BlzSendSyncData(\\\"myprefix\\\", \\\"-load \"+(FinString)+\"\\\")//\" )\r\n        call PreloadGenEnd(\"BossBattleSave\\\\Boss Battle Progress.txt\" ) \r\n        \r\n        call PreloadGenClear() \r\n        call PreloadGenStart()  \r\n        call Preload(\"\\\")\\ncall BlzSendSyncData(\\\"myprefix\\\", \\\"-load \"+(FinString)+\"\\\")//\" )\r\n        call PreloadGenEnd(\"BossBattleSave\\\\Backup\\\\Boss Battle BackUp \" + GetPlayerName(p) + \" LvL \" + I2S(udg_LvL[i]) + \" Exp \" + I2S(udg_Exp[i]) + \" Key \" + I2S(GetRandomInt(1, 9999 )) + \".txt\" )\r\n    endif\r\nendfunction\r\n\r\nfunction SaveLoadStart takes nothing returns nothing\r\n    local integer cyclA\r\n    local integer exp = 0\r\n    local player p\r\n    \r\n    if (GetPlayerName(Player(0)) == \"WorldEdit\" and udg_GameStatus == GAME_STATUS_OFFLINE) or ( udg_Endgame == 1 and udg_GameStatus == GAME_STATUS_ONLINE ) then\r\n        if udg_logic[43] then\r\n            set exp = 500\r\n            if udg_Multiboard_Time[3] == 0 then\r\n                set exp = exp + R2I( 400 * ( 1 - ( udg_Multiboard_Time[2] / 60 ) ) )\r\n            endif\r\n        elseif udg_logic[1] then\r\n            set exp = 50*(udg_Boss_LvL-1)\r\n        endif\r\n        set cyclA = 1\r\n        loop\r\n            exitwhen cyclA > 4\r\n            set p = Player( cyclA - 1 )\r\n            if GetPlayerSlotState( p ) == PLAYER_SLOT_STATE_PLAYING then\r\n                call SaveCoding(cyclA, exp, p)\r\n            endif\r\n            set cyclA = cyclA + 1\r\n        endloop\r\n    endif\r\n    \r\n    set p = null\r\nendfunction\r\n\r\nendlibrary",
  "Events": [],
  "LocalVariables": [],
  "Conditions": [],
  "Actions": []
}